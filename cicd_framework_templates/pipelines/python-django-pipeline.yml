# Python Django CI/CD Pipeline Template
# Comprehensive pipeline for Django applications with PostgreSQL

name: Python Django CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'
  REGISTRY: 'your-registry.com'

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install Dependencies
        run: poetry install

      - name: Security Scan with Bandit
        run: poetry run bandit -r . -f json -o bandit-report.json

      - name: Safety Check
        run: poetry run safety check --json --output safety-report.json

      - name: Secrets Detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: License Check
        run: poetry run pip-licenses --format=json --output-file=licenses.json

  # Code Quality and Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install Dependencies
        run: poetry install

      - name: Black Code Formatting
        run: poetry run black --check .

      - name: isort Import Sorting
        run: poetry run isort --check-only .

      - name: Flake8 Linting
        run: poetry run flake8 .

      - name: MyPy Type Checking
        run: poetry run mypy .

      - name: Pylint Analysis
        run: poetry run pylint **/*.py

  # Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      elasticsearch:
        image: elasticsearch:8.8.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 9200:9200

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install Dependencies
        run: poetry install

      - name: Run Migrations
        run: poetry run python manage.py migrate
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          ELASTICSEARCH_URL: http://localhost:9200

      - name: Collect Static Files
        run: poetry run python manage.py collectstatic --noinput
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Unit Tests
        run: poetry run pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          ELASTICSEARCH_URL: http://localhost:9200

      - name: Integration Tests
        run: poetry run pytest tests/integration/ -v
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          ELASTICSEARCH_URL: http://localhost:9200

      - name: Functional Tests
        run: poetry run pytest tests/functional/ -v
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

      - name: SonarQube Analysis
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/')

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Export Requirements
        run: poetry export -f requirements.txt --output requirements.txt --without-hashes

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/django-app
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Container Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'

  # Database Migration Testing
  migration-test:
    name: Migration Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: migrationdb
          POSTGRES_USER: testuser
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install Dependencies
        run: poetry install

      - name: Test Forward Migrations
        run: poetry run python manage.py migrate
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/migrationdb

      - name: Test Reverse Migrations
        run: |
          poetry run python manage.py migrate --fake-initial
          poetry run python manage.py showmigrations
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/migrationdb

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, migration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Run Database Migrations
        run: |
          kubectl create job django-migrate-$(date +%s) --from=cronjob/django-migrate -n staging
          kubectl wait --for=condition=complete job/django-migrate-$(date +%s) -n staging --timeout=300s

      - name: Deploy Application
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            k8s/staging/
          images: |
            ${{ needs.build.outputs.image-tag }}

      - name: Health Check
        run: |
          kubectl wait --for=condition=ready pod -l app=django-app -n staging --timeout=300s
          curl -f https://staging.your-django-app.com/health/

      - name: Run Smoke Tests
        run: |
          poetry run pytest tests/smoke/ --base-url=https://staging.your-django-app.com

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Database Backup
        run: |
          kubectl create job db-backup-$(date +%s) --from=cronjob/db-backup -n production
          kubectl wait --for=condition=complete job/db-backup-$(date +%s) -n production --timeout=600s

      - name: Run Database Migrations
        run: |
          kubectl create job django-migrate-$(date +%s) --from=cronjob/django-migrate -n production
          kubectl wait --for=condition=complete job/django-migrate-$(date +%s) -n production --timeout=300s

      - name: Rolling Deployment
        uses: azure/k8s-deploy@v1
        with:
          strategy: rolling
          manifests: |
            k8s/production/
          images: |
            ${{ needs.build.outputs.image-tag }}

      - name: Health Check
        run: |
          kubectl wait --for=condition=ready pod -l app=django-app -n production --timeout=600s
          curl -f https://your-django-app.com/health/

      - name: Warm Cache
        run: |
          curl -f https://your-django-app.com/api/warmup/

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Load Testing
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js
        env:
          BASE_URL: https://staging.your-django-app.com

      - name: Database Performance Test
        run: |
          poetry run python manage.py test tests.performance.database_performance
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

  # Notification
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, performance-test]
    if: always()

    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

